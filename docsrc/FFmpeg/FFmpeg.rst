FFmpeg 实用命令
==================

FFmpeg的\ `官方文档 <https://ffmpeg.org/ffmpeg.html>`__\ 简洁有力，但它的排版逻辑是技术文档而不是工具书或问答，因此可能并不是一个好的参阅选择。

本文将以实际用例为主。毕竟照搬 FFmpeg 的文档实在没有什么意义。不过例子是由浅入深的，如果读者没有任何的 FFmpeg 使用经验，仍然建议按顺序依次浏览。

格式转换
-----------

这毫无疑问是最常使用的功能。

转码
~~~~~~

比如将一个 FLV 文件转为 MP4 文件并重编码，FFmpeg 会自动寻找编解码器：

.. code:: shell

   ffmpeg -i video.flv video.mp4

其中，在 ``-i`` 后指定输入文件的文件名，在所有命令的最后指定输出文件的文件名。 **如果文件名带有空格，请用双引号将文件名包裹。** 上述的 ``video.mp4`` 在 ``-i`` 参数之后，称为 **输出参数** ；反之，在 ``-i`` 之前的称为 **输入参数**。

注意：转码过程可能较慢。关于快速格式转换，请参阅下文的流复制内容。

流复制
~~~~~~~~~~

格式转换还有一种快速的情形。如果两者的所有流都不改动且输出容器支持输入的所有流，那么可以直接向 ``-c`` 传递 ``copy``
以进行流复制。这样省去了重新编码的时间，格式转换将十分迅速：

.. code:: shell

   ffmpeg -i video.avi -c copy video.mp4

其中，``-c`` 是 codec 的简称，表示所有流的编解码器。该命令表示所有流均不进行额外操作，直接复制到新容器中。

提取流（音频、字幕）
~~~~~~~~~~~~~~~~~~~~

有时需要指定流来完成格式转换，比如将一个 MP4 视频文件转为 AAC
音频文件（此处实质上是直接提取）：

.. code:: shell

   ffmpeg -i video.mp4 -c:a copy audio.aac

此处的 ``-c:a`` 表示音频流；视频流 ``-c:v`` 与字幕流 ``-c:s`` 自然也类似。 注意：如果音频流与容器冲突时，你需要将 ``copy`` 改为正确的编解码器（或者删去 ``-c:a copy`` 来让 FFmpeg 自动选择），以执行重编码。

对于内挂了字幕的视频文件，也可以将其字幕单独提取出来，例如：

.. code:: shell
   
   ffmpeg -i video.mkv -c:s copy subtitle.srt

截取视频
----------

下面，以想要截取 video.mp4 视频的第2到第5分钟为例。

对于容易计算片段秒数的截取任务（本例中片段长为 (5-2)*60=180秒），可以使用 ``-t`` 参数，即指定片段长度：

.. code:: shell

   ffmpeg -ss 00:02:00 -i video.mp4 -t 180 cut.mp4

其中， ``-ss`` 参数指定了起始的时间戳记，而 ``-t`` 参数指定了片段长度（秒）。

更常见的，不用 ``-t`` 指定片段长度，而是用 ``-to`` 指定终止时刻：

.. code:: shell

   ffmpeg -ss 00:02:00 -i video.mp4 -to 00:05:00 -copyts cut.mp4

此处的 ``-copyts`` 表示沿用原视频的时间轴。这是因为 ``-i``
会重置时间轴；如果不使用 ``-copyts`` ，将会使传递给 ``-ss`` 的
``00:02:00`` 被重置为视频开始（第0秒），进而导致 ``-to 00:05:00`` 会被错误地指定为原视频的第7秒处。

需要注意：

-  在大多数场合，参数 ``-ss`` 放在 ``-i`` 之前（即作为输入参数），这被称为输入检索（inputing seek）。 **如果误将 ``-ss`` 放在 ``-i`` 之后会慢一些** ，因为 FFmpeg 会执行输出检索（outputing seek），它需要对 ``-ss`` 参数指定的戳记之前的视频内容进行编码操作。
-  传递给 ``-t`` 的片段长度可以写成 ``00:03:00`` 的形式。它也可以带有小数，比如 180.5 表示 180.5 秒。

.. admonition:: 在流复制时使用快速检索，起始时刻会变得不精确
   :class: warning
   
   流复制操作 ``-c copy`` 与放在 ``-i`` 之前进行的快速检索 ``-ss hh:mm:ss -i video`` 同时使用，会导致不能精确定位起始时刻。

   这其中的原理是，作为输入参数的 `-ss` 会先快速定位到给定的起始时间戳（如上例的 ``00:02:00`` ）之前的一个位置。然后在视频流编码过程中，将该位置与起始时间之间的多余的这段舍弃。
   
   由于在流复制 ``-c copy`` 时，视频流不会被编码而是直接复制，因此上述提到的多余的视频段就不会被舍弃。这会导致截取的视频将包含指定时间之前的一段视频内容。


添加字幕
-----------

FFmpeg 可以将字幕内挂到封装容器内，也可以内嵌到视频流中。

一些注意事项：

- 独立的字幕文件请使用 UTF-8 编码。
- Windows 系统可能缺少一个字体接口，需要自己配置一份 ``fonts.conf`` 文件，并放在 ``%FONTCONFIG_PATH%`` 这个环境变量对应的路径下。

  - 如果用户没有该变量，请新建一个；其默认值一般是 ``C:\Users\用户名\`` 。
  - 关于 ``fonts.conf`` 文件，请参考本文的附录 :ref:`appendix-fonts-conf` 。

内挂字幕
~~~~~~~~~~

内挂字幕是一种相对于外挂字幕的称呼。外挂字幕是指将字幕存放在一个独立的字幕文件中，在播放视频时，通过视频播放器来加载这个字幕文件。而内挂字幕，是将这样一个独立的“字幕文件”，封装在了视频文件内部作为独立的字幕数据流。这样既能按需开启或关闭字幕，也免去了字幕文件丢失、匹配等烦恼。

内挂字幕的本质是将字幕文件单独作为字幕流封装，因此不需要对视频流进行编码。因此，将字幕文件内挂到指定的视频一般非常快：

.. code:: shell

   ffmpeg -i input.mp4 -i input.srt -c:v copy -c:a copy -c:s ass output.mkv

在封装时，一般需要选择 ``-c:s ass`` 这个字幕转码器。上例中使用了早年间非常流行的内挂字幕容器 mkv，实际上 mp4 容器也可以进行内挂操作。

内嵌字幕
~~~~~~~~~~

内嵌字幕（或称硬字幕）是指将字幕与原视频图像混叠的一种字幕，它直接嵌入到图像中，因此无法关闭，也无法调整字幕的大小、字体等样式。内嵌字幕的本质是将字幕作为图像输出，因此需要对视频流进行编码，往往速度慢：

.. code:: shell
   
   ffmpeg -i input.mp4 -vf subtitles=input.srt output.mp4

如果字幕以字幕流的形式存在于另一个视频文件中，可以直接调用，无需将字幕流先提取成文件：

.. code:: shell
   
   ffmpeg -i input.mkv -vf subtitles=input.mkv output.mp4


合并视频
------------

最简单的视频合并方法，是将所有待合并的视频文件路径，依次列在一个 txt 文件中，然后让 FFmpeg 读取它。

假设我们已经将所有待合并的 mp4 文件放在当前文件夹中，并且按照合并的顺序进行了命名。那么，用户可以在该文件夹中用 Shift + 鼠标右键打开 PowerShell 控制台，然后依次输入以下命令：

.. code:: shell
   
   ls *.mp4 | % Name > mylist.txt
   ffmpeg -f concat -i mylist.txt -c copy output.mp4

最后，删除文件夹中的 ``mylist.txt`` 文件即可。


替换或删除视频数据流
---------------------

除了格式转换中提到的提取流的操作，删除或替换也是常见的选择。

删除流
~~~~~~

利用 ``-vn/-an/sn/-dn`` 参数可以跳过视频/音频/字幕/数据流，比如一段没有音频流的视频：

.. code:: shell

   ffmpeg -i video.mp4 -c:v copy -an NoAudio.mp4

上例中的 ``-c:v`` 是传递视频编解码器， ``copy`` 表示不进行编解码操作而是直接拷贝。

替换流
~~~~~~~

替换流的常用场景是将一段音频替换原视频中的音频流：

.. code:: shell

   ffmpeg -i video.mp4 -i audio.mp3 -c:v copy -map 0:v:0 -map 1:a:0 out.mp4
   # 或者省略第二冒号
   ffmpeg -i video.mp4 -i audio.mp3 -c:v copy -map 0:v -map 1:a out.mp4

这里输入了两个文件。视频流将直接复制。复制对象由 ``-map``手动指定了，其后的 ``0:v:0`` 表示指定第0个输入文件（即 video.mp4）的视频流，在处理后作为输出文件的第0个视频流（单个文件可以有多个视频流）。类似地，``-map 1:a:0`` 表示指定第1个输入文件（即 audio.mp3）的音频流，在处理后作为输出文件的第0个音频流。由于此例中输出的视频不存在多个同类流，因此第二个冒号可以省略。

不使用 ``-map`` 手动指定时，FFmpeg 会自动选择：

- 输入文件的所有视频流（一个文件可能有多个流）中分辨率最高的。
- 输入文件的所有音频流中声道数最多的。
- 输入文件的所有字幕流中最靠前的。注意：如果字幕流是图像型而不是文字型的，需要显式地指定 ``c:s`` 参数。比如，如果 ``video.mkv`` 的字幕流是图像型的，那么下例中的 ``out1.mkv`` 不含字幕流（因为默认的 MKV 字幕流编码器只接受文字型字幕流），而 ``out2.mkv`` 则包含字幕流（因为 dvdsub 用于图形型字幕流）：

  .. code:: shell

     ffmpeg -i video.mkv out1.mkv -c:s dvdsub out2.mkv

压制
----

视频的压制主要有 CRF（Constant Rate Factor，恒定率系数）与二压（2Pass）两种常用的方法： 

- CRF（Constant Rate Factor）指定一个 0~51 的数值作为视频质量标准值（FFmpeg 默认 23，常用范围是 17~28），数值越小，恒定律系数越好，压缩率也越低。恒定律系数的视频码率是根据画面动态调整的，与恒定码率（CBR）恰好是对立的。
- 二压（2Pass）是需要生成固定大小文件时的压制方法，顾名思义，需要编码两次（因此较慢）。用户可能需要自行计算视频码率限值。

在大多数场合，CRF都是更受欢迎的。二压的使用场合主要有两种：一种是压制后文件的大小被严格限制时，另一种是压制后文件的码率被严格限制时。

恒定率系数（CRF）
~~~~~~~~~~~~~~~~~~~~~~

CRF 的压制中还有一个参数，称为预案 ``-preset`` 。较慢的预案能够更好地发挥压制的效果，按压制后质量从低到高分为 ``ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow`` 这9种。

下例中使用了 ``slow`` 预案来进行压制。视频编解码器设置为 libx264，设定了一个恒定律系数优于默认的 CRF 值（设定的20比默认的23小），并对音频流进行复制：

.. code:: shell

   ffmpeg -i video.mp4 -c:v libx264 -preset slow -crf 20 -c:a copy out.mp4

二压（2Pass）
~~~~~~~~~~~~~

设想一个二压的应用场景（本例取自* `FFmpeg
Wiki <https://trac.ffmpeg.org/wiki/Encode/H.264>`_ ）：需要将一个10分钟（600秒）长的视频压制到200MB，并保持音频码率在
128 kbps。

首先计算压制后视频流的比特率值。1 MB = 8192 kbit，下式的第一项即为总文件的比特率值，减去第二项音频流的比特率值，就得到了视频流的比特率值：

.. math::

   \frac{200 \times 8192}{600} - 128 \approx 2730 - 128 = 2602 \,\mathrm{kbit/s}.

在上式的 2602 kbit/s 的基础上留一定余量，设置为 2600 kbit/s：

.. code:: shell

   ffmpeg -y -i video.mp4 -c:v libx264 -b:v 2600k -pass 1 -an -f mp4 NUL ^
   ffmpeg -i video.mp4 -c:v libx264 -b:v 2600k -pass 2 -c:a aac -b:a 128k out.mp4

大部分参数比较好理解，需要说明的是这几个参数： 

- ``-y`` 是一个全局参数，表示覆盖文件时不询问。
- ``NUL`` 表示二压的第一步不输出，而行尾的 ``^`` 表示续行。在 Linux 系统上，请使用 ``/dev/null \`` 代替 ``NUL ^``\ 。
- ``-an`` 表示忽略音频流。同理还有 ``-vn/sn/dn``\ 。

.. _appendix-fonts-conf:

附录：fonts.conf
-------------------

本文件来源于 `FiveYellowMice/how-to-convert-videos-with-ffmpeg-zh <https://github.com/FiveYellowMice/how-to-convert-videos-with-ffmpeg-zh/blob/master/etc/fontconfig-windows/fonts.conf>`_ 仓库。

.. literalinclude:: fonts.conf
   :language: xml
   :linenos: